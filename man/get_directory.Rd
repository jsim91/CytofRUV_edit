% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/load_data.R
\name{get_directory}
\alias{get_directory}
\title{# ==============================================================================
# split cell indices by cell metadata factor(s) from CATALYST package
#   - x:   a SCE with rows = cells, columns = features
#   - by:  colData columns specifying factor(s) to aggregate by
# ------------------------------------------------------------------------------
#' @importFrom data.table data.table
#' @importFrom SummarizedExperiment colData
#' @importFrom purrr map_depth
.split_cells <- function(x, by) {
  stopifnot(is.character(by), by %in% colnames(colData(x)))
  cd <- data.frame(colData(x))
  dt <- data.table(cd, i = seq_len(ncol(x)))
  dt_split <- split(dt, by = by, sorted = TRUE, flatten = FALSE)
  map_depth(dt_split, length(by), "i")
}}
\usage{
get_directory()
}
\description{
# ==============================================================================
# aggregation of single-cell to pseudobulk data from CATALYST package
# e.g., median expression by cluster- or cluster-sample
#   - x:   a SCE with rows = cells, columns = features
#   - by:  colData columns specifying factor(s) to aggregate by
#   - fun: aggregation function specifying the
#          summary statistic, e.g., sum, mean, median
# ------------------------------------------------------------------------------
#' @importFrom dplyr bind_rows
#' @importFrom Matrix rowMeans rowSums
#' @importFrom matrixStats rowMedians
#' @importFrom purrr map_depth
.agg <- function(x, by, fun = c("median", "mean", "sum")) {
  fun <- switch(match.arg(fun),
                median = rowMedians, mean = rowMeans, sum = rowSums)
  cs <- .split_cells(x, by)
  pb <- map_depth(cs, -1, function(i) {
    if (length(i) == 0) return(numeric(nrow(x)))
    fun(assay(x, "exprs")[, i, drop = FALSE])
  })
  map_depth(pb, -2, function(u) as.matrix(data.frame(
    u, row.names = rownames(x), check.names = FALSE)))
}
}
\details{
# ==============================================================================
# wrapper for ComplexHeatmap annotations from CATALYST package
# ------------------------------------------------------------------------------
#' @importFrom ComplexHeatmap columnAnnotation rowAnnotation
#' @importFrom grid gpar
#' @importFrom methods is
#' @importFrom scales hue_pal
.anno_factors <- function(df, type = c("row", "column")) {
  # check that all data.frame columns are factors
  stopifnot(is(df, "data.frame"))
  stopifnot(all(vapply(as.list(df), is.factor, logical(1))))
  # for ea. factor, extract levels & nb. of levels
  lvls <- lapply(as.list(df), levels)
  nlvls <- vapply(lvls, length, numeric(1))
  # cols <- pal.safe(parula, n = sum(nlvls), main = NULL)
  names(cols) <- unlist(lvls)
  cols <- split(cols, rep.int(seq_len(ncol(df)), nlvls))
  names(cols) <- names(df)
  HeatmapAnnotation(which = match.arg(type),
                    df = df, col = cols, gp = gpar(col = "white"))
}
}
